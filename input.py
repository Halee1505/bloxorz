from game import Game
from node import Node, Block

data1 = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3], [4, 1], [4, 2], [4, 3], [
    5, 1], [5, 2], [5, 3], [5, 4], [6, 2], [6, 3], [6, 4], [6, 5], [7, 2], [7, 3], [7, 4], [7, 5], [8, 2], [8, 3], [8, 4], [8, 5], [9, 3], [9, 4]]

start1 = Node(1, 1)
goal1 = Node(7, 4)

data2 = [
    [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [5, 4], [4, 4], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [
        7, 5], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [11, 4], [10, 4], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [13, 0], [13, 1], [13, 2], [13, 3], [13, 4], [14, 0], [14, 1], [14, 2], [14, 3], [14, 4],
]
start2 = Node(1, 4)
goal2 = Node(13, 1)


data3 = [
    [0, 1], [0, 2], [0, 3], [0, 4], [1, 1], [1, 2], [1, 3], [1, 4], [2, 1], [2, 2], [2, 3], [2, 4], [
        3, 1], [3, 2], [3, 3], [3, 4], [4, 2], [5, 2], [6, 0], [6, 1], [6, 2], [7, 0], [7, 1], [7, 2],
    [8, 0], [8, 1], [8, 2],  [9, 0], [10, 0], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4],  [12, 0], [12, 1], [12, 2], [
        12, 3], [12, 4], [12, 5], [13, 0], [13, 2], [13, 3], [13, 4], [13, 5],  [14, 5], [14, 2], [14, 3], [14, 4],
]
start3 = Node(1, 3)
goal3 = Node(13, 3)

data4 = [
    [0, 2], [0, 3], [0, 4], [0, 5], [0, 6],
    [1, 2], [1, 3], [1, 4], [1, 5], [1, 6],
    [2, 2], [2, 3], [2, 4], [2, 5], [2, 6],
    [3, 0], [3, 1], [3, 2],
    [4, 0], [4, 1],
    [5, 0], [5, 1], [5, 5], [5, 6], [5, 7], [5, 8],
    [6, 0], [6, 1], [6, 5], [6, 6], [6, 7], [6, 8],
    [7, 0], [7, 1], [7, 5], [7, 6], [7, 7], [7, 8],
    [8, 0], [8, 1], [8, 5], [8, 6],
    [9, 0], [9, 1], [9, 2], [9, 5], [9, 6],

    [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8],
    [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8],
    [12, 5], [12, 6], [12, 7], [12, 8],
    [13, 5], [13, 6], [13, 7], [13, 8],
]
start4 = Node(1, 5)
goal4 = Node(6, 7)

data5 = [
    [0, 7], [0, 8], [0, 9],
    [1, 1], [1, 2], [1, 3], [1, 4], [1, 7], [1, 8], [1, 9],
    [2, 1], [2, 2], [2, 3], [2, 4], [2, 7], [2, 8], [2, 9],
    [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 8], [3, 9],
    [4, 1], [4, 2], [4, 4], [4, 4], [4, 5], [4, 8],
    [5, 1], [5, 5], [5, 8],
    [6, 1], [6, 5], [6, 8],
    [7, 1], [7, 5], [7, 8],
    [8, 1], [8, 5], [8, 8],
    [9, 1], [9, 5], [9, 8],
    [10, 1], [10, 5], [10, 6], [10, 7], [10, 8],
    [11, 0], [11, 1], [11, 5], [11, 6], [11, 7], [11, 8],
    [12, 0], [12, 1], [12, 2], [12, 5], [12, 6], [12, 7], [12, 8],
    [13, 0], [13, 1], [13, 2], [13, 6], [13, 7],
    [14, 0], [14, 1], [14, 2], [14, 6], [14, 7],
]
start5 = Node(13, 1)
goal5 = Node(1, 8)

data6 = [
    [0, 3],
    [1, 3],
    [2, 3],
    [3, 3],
    [4, 3], [4, 4], [4, 5],
    [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5],
    [6, 0], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8],
    [7, 0], [7, 7], [7, 8], [7, 9],
    [8, 0], [8, 1], [8, 2], [8, 7], [8, 8], [8, 9],
    [9, 0], [9, 1], [9, 2], [9, 6], [9, 7], [9, 8], [9, 9],
    [10, 0], [10, 1], [10, 2], [10, 7], [10, 8], [10, 6],
    [11, 2], [11, 3], [11, 4],
    [12, 2], [12, 3], [12, 4], [12, 5],
    [13, 3], [13, 4], [13, 5],
    [14, 3], [14, 4], [14, 5],
]
start6 = Node(0, 3)
goal6 = Node(13, 4)

data7 = [
    [0, 2], [0, 3], [0, 4], [0, 5],
    [1, 2], [1, 3], [1, 4], [1, 5], [1, 6],
    [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7],
    [3, 3], [3, 6], [3, 7],
    [4, 3], [4, 7],
    [5, 3], [5, 7],
    [6, 3], [6, 7],
    [7, 3], [7, 4], [7, 5], [7, 6], [7, 7],
    [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5],
    [9, 0], [9, 1], [9, 4], [9, 5],
    [10, 0], [10, 1],
    [11, 0], [11, 1], [11, 2],
    [12, 2], [12, 3], [12, 4], [12, 5],
    [13, 2], [13, 3], [13, 4], [13, 5],
    [14, 2], [14, 3], [14, 4], [14, 5],
]
start7 = Node(1, 3)

goal7 = Node(13, 3)
data8 = [
    [0, 3],
    [1, 3],
    [2, 3],
    [3, 3],
    [4, 3], [4, 4], [4, 5],
    [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5],
    [6, 0], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8],
    [7, 0], [7, 7], [7, 8], [7, 9],
    [8, 0], [8, 1], [8, 2], [8, 7], [8, 8], [8, 9],
    [9, 0], [9, 1], [9, 2], [9, 6], [9, 7], [9, 8], [9, 9],
    [10, 0], [10, 1], [10, 2], [10, 7], [10, 8], [10, 6],
    [11, 2], [11, 3], [11, 4],
    [12, 2], [12, 3], [12, 4], [12, 5],
    [13, 3], [13, 4], [13, 5],
    [14, 3], [14, 4], [14, 5],
]
start8 = Node(0, 3)
goal8 = Node(13, 4)

data9 = [
    [0, 3],
    [1, 3],
    [2, 3],
    [3, 3],
    [4, 3], [4, 4], [4, 5],
    [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5],
    [6, 0], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8],
    [7, 0], [7, 7], [7, 8], [7, 9],
    [8, 0], [8, 1], [8, 2], [8, 7], [8, 8], [8, 9],
    [9, 0], [9, 1], [9, 2], [9, 6], [9, 7], [9, 8], [9, 9],
    [10, 0], [10, 1], [10, 2], [10, 7], [10, 8], [10, 6],
    [11, 2], [11, 3], [11, 4],
    [12, 2], [12, 3], [12, 4], [12, 5],
    [13, 3], [13, 4], [13, 5],
    [14, 3], [14, 4], [14, 5],
]
start9 = Node(0, 3)
goal9 = Node(13, 4)

data10 = [
    [0, 3],
    [1, 3],
    [2, 3],
    [3, 3],
    [4, 3], [4, 4], [4, 5],
    [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5],
    [6, 0], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8],
    [7, 0], [7, 7], [7, 8], [7, 9],
    [8, 0], [8, 1], [8, 2], [8, 7], [8, 8], [8, 9],
    [9, 0], [9, 1], [9, 2], [9, 6], [9, 7], [9, 8], [9, 9],
    [10, 0], [10, 1], [10, 2], [10, 7], [10, 8], [10, 6],
    [11, 2], [11, 3], [11, 4],
    [12, 2], [12, 3], [12, 4], [12, 5],
    [13, 3], [13, 4], [13, 5],
    [14, 3], [14, 4], [14, 5],
]
start10 = Node(0, 3)
goal10 = Node(13, 4)


def choose_level(level):

    if level == 1:
        return [data1, start1, goal1]
    elif level == 2:
        return [data2, start2, goal2]
    elif level == 3:
        return [data3, start3, goal3]
    elif level == 4:
        return [data4, start4, goal4]
    elif level == 5:
        return [data5, start5, goal5]
    elif level == 6:
        return [data6, start6, goal6]
    elif level == 7:
        return [data7, start7, goal7]
        # ####
    elif level == 8:
        return [data8, start8, goal8]
    elif level == 9:
        return [data9, start9, goal9]
    elif level == 10:
        return [data10, start10, goal10]

    else:
        print("Invalid level")
        return choose_level()


def get_start_game(level):
    map = []
    [data, start, goal] = choose_level(level)

    for i in range(16):
        map.append([" "] * 16)
    for i in data:
        map[i[0]][i[1]] = "x"

    # for i in range(16):
    #     map.append(["x"] * 16)
    # start = Node(8, 8)
    # goal = Node(0, 0)

    game = Game(map, Block(start, start),  goal, None)
    return game


if __name__ == '__main__':
    get_start_game()
